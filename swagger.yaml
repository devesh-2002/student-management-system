openapi: 3.0.0
info:
  title: Student Management System
  description: Description of your API
  contact:
    name: Devesh Rahatekar
    email: dev241202@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/
    description: Local server
    
paths:
  /admin/login:
    post:
      summary: Admin login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: The email of the admin.
                password:
                  type: string
                  description: The password of the admin.
      responses:
        200:
          description: Login successful.
        401:
          description: Invalid credentials.
        500:
          description: Internal server error.

  /admin/addStudent:
    post:
      summary: Add a student.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the student.
                email:
                  type: string
                  description: The email of the student.
                password:
                  type: string
                  description: The password of the student.
                department:
                  type: string
                  description: The Department of the student
      responses:
        201:
          description: Student added successfully.
        400:
          description: Bad request.
        500:
          description: Internal server error.

  /admin/assignTask:
    post:
      summary: Assign a task to a student.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - studentId
                - taskName
                - dueTime
              properties:
                studentId:
                  type: string
                  description: The ID of the student.
                taskName:
                  type: string
                  description: The task to be assigned.
                dueTime:
                  type: string
                  description: The time to solve assignment
      responses:
        200:
          description: Task assigned successfully.
        400:
          description: Bad request.
        500:
          description: Internal server error.

  /student/login:
    post:
      summary: Student login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - dueTime
              properties:
                email:
                  type: string
                  description: The email of the student.
                password:
                  type: string
                  description: The password of the student.
                dueTime:
                   type: string
                   description : The due date of task
      responses:
        200:
          description: Login successful.
        401:
          description: Invalid credentials.
        500:
          description: Internal server error.

  /student/{studentId}/tasks:
    get:
      summary: Get tasks assigned to a student.
      parameters:
        - name: studentId
          in: path
          description: The ID of the student.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Tasks retrieved successfully.
        404:
          description: Student not found.
        500:
          description: Internal server error.

  /student/{studentId}/tasks/{taskId}:
    put:
      summary: Update task status for a student.
      parameters:
        - name: studentId
          in: path
          description: The ID of the student.
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: The ID of the task.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  description: The status to be updated (e.g., 'completed').
      responses:
        200:
          description: Task status updated successfully.
        404:
          description: Student or task not found.
        500:
          description: Internal server error.
